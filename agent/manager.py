import asyncio
import os
import json
from datetime import datetime, timedelta
from typing import Dict, Any
from dotenv import load_dotenv
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from shared.database import (
    db, Task, ResearchTopic, UserSettings, init_db
)
from peewee import DoesNotExist
from shared.logger import get_logger
from shared.event_system import get_event_bus, Event, task_events
from agent.agent import ArxivAnalysisAgent

load_dotenv()

logger = get_logger(__name__)


async def handle_task_creation(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    try:
        task_id = event.data.get("task_id")
        task_type = event.data.get("task_type")

        if not task_id:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ ID: {event.data}")
            return

        logger.info(
            f"üöÄ arXiv –ê–ì–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ {task_id} —Ç–∏–ø–∞ {task_type}"
        )

        db.connect()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            task = Task.get(Task.id == task_id)

            if task.status != "pending":
                logger.info(
                    f"–ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: {task.status})"
                )
                return

            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            task.status = "processing"
            task.save()

            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
            agent = ArxivAnalysisAgent()
            result = await agent.process_task(task)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            task.result = result
            task.status = "completed"
            task.save()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
            task_events.task_completed(task_id=task.id, result=result)

            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")

        except DoesNotExist:
            logger.error(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é
            try:
                task = Task.get(Task.id == task_id)
                task.status = "failed"
                task.result = f"–û—à–∏–±–∫–∞: {str(e)}"
                task.save()
                task_events.task_failed(task_id=task_id, error=str(e))
            except Exception:
                pass

        db.close()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á: {e}")


async def check_and_process_pending_tasks(agent: ArxivAnalysisAgent):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    try:
        db.connect()

        # –ò—â–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        pending_tasks = Task.select().where(Task.status == "pending")

        if pending_tasks.count() > 0:
            logger.info(
                f"üîç –ù–∞–π–¥–µ–Ω–æ {pending_tasks.count()} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..."
            )

            for task in pending_tasks:
                try:
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É {task.id} —Ç–∏–ø–∞ {task.task_type}")

                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
                    task.status = "processing"
                    task.save()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                    result = await agent.process_task(task)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    task.result = result
                    task.status = "completed"
                    task.save()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    task_events.task_completed(task_id=task.id, result=result)

                    logger.info(f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {task.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
                    task.status = "failed"
                    task.result = f"–û—à–∏–±–∫–∞: {str(e)}"
                    task.save()

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")


async def periodic_monitoring(agent: ArxivAnalysisAgent):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ç–µ–º"""
    try:
        db.connect()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã
        active_topics = ResearchTopic.select().where(ResearchTopic.is_active)
        
        for topic in active_topics:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–µ–Ω –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                try:
                    settings = UserSettings.get(UserSettings.user_id == topic.user_id)
                    if not settings.monitoring_enabled:
                        continue
                except DoesNotExist:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–ª–∏ —ç—Ç—É —Ç–µ–º—É
                user_monitoring = agent.monitoring_active.get(topic.user_id)
                if user_monitoring:
                    last_check = user_monitoring.get("last_check", datetime.now() - timedelta(hours=1))
                    if datetime.now() - last_check < timedelta(minutes=30):
                        continue  # –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                
                logger.info(f"–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º—ã {topic.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {topic.user_id}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
                await agent.perform_arxiv_search(
                    topic.user_id, 
                    topic.target_topic, 
                    topic.search_area, 
                    topic.id
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if topic.user_id in agent.monitoring_active:
                    agent.monitoring_active[topic.user_id]["last_check"] = datetime.now()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç–µ–º—ã {topic.id}: {e}")
        
        db.close()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {e}")
        db.close()


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª arXiv –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ arXiv –∞–Ω–∞–ª–∏–∑–∞ –∞–≥–µ–Ω—Ç–∞...")

    init_db()
    agent = ArxivAnalysisAgent()

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    event_bus = get_event_bus()
    task_events.subscribe_to_creations(handle_task_creation)

    logger.info("arXiv –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ arXiv —Å—Ç–∞—Ç–µ–π")
    logger.info("- –î–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–º")
    logger.info("- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(event_bus.start_processing(poll_interval=0.5))

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await check_and_process_pending_tasks(agent)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–º
            await periodic_monitoring(agent)
            
            await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ –∞–≥–µ–Ω—Ç–∞: {e}")
            await asyncio.sleep(60)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ò–ò –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞: {e}")
        raise
