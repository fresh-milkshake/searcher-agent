import asyncio
import os
from dotenv import load_dotenv
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from shared.database import db, Task, init_db
from peewee import DoesNotExist
from shared.llm import AGENT_MODEL
from shared.logger import get_logger
from shared.event_system import get_event_bus, Event, task_events
from agents import Agent, Runner

load_dotenv()

logger = get_logger(__name__)


class AIAgent:
    def __init__(self):
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        self.agent = Agent(
            name="AI Assistant",
            model=AGENT_MODEL,
            instructions="–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫—Ä–∞—Ç–∫–æ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ.",
        )

    async def process_message(self, message_text: str) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é agents SDK"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Runner –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await Runner.run(self.agent, message_text)

            if result and result.final_output:
                return str(result.final_output).strip()
            else:
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò."

        except Exception as e:
            error_msg = str(e)
            logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ agents SDK: {error_msg}"
            )
            return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {error_msg}"

    async def process_task(self, task: Task) -> str:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë —Ç–∏–ø–∞"""
        try:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ {task.id} —Ç–∏–ø–∞ {task.task_type}")

            if task.task_type == "process_message":
                result = await self.process_message(str(task.data))
                logger.info(
                    f"–ó–∞–¥–∞—á–∞ {task.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤"
                )
                return result
            else:
                error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏: {task.task_type}"
                logger.warning(error_msg)
                return error_msg

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}"
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
            return error_msg


async def handle_task_creation(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ –º–µ—Ä–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"""
    try:
        task_id = event.data.get("task_id")
        task_type = event.data.get("task_type")

        if not task_id:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ ID: {event.data}")
            return

        logger.info(
            f"üöÄ –†–ï–ê–õ–¨–ù–´–ô –ê–ì–ï–ù–¢: –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ {task_id} —Ç–∏–ø–∞ {task_type}"
        )

        db.connect()

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            task = Task.get(Task.id == task_id)

            if task.status != "pending":
                logger.info(
                    f"–ó–∞–¥–∞—á–∞ {task_id} —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—Å—Ç–∞—Ç—É—Å: {task.status})"
                )
                return

            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
            task.status = "processing"
            task.save()

            # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É
            agent = AIAgent()
            result = await agent.process_task(task)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            task.result = result
            task.status = "completed"
            task.save()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É —Å–æ–±—ã—Ç–∏–π
            task_events.task_completed(task_id=task.id, result=result)

            logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

        except DoesNotExist:
            logger.error(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task_id}: {e}")
            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é
            try:
                task = Task.get(Task.id == task_id)
                task.status = "failed"
                task.result = f"–û—à–∏–±–∫–∞: {str(e)}"
                task.save()
                task_events.task_failed(task_id=task_id, error=str(e))
            except Exception:
                pass

        db.close()

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ò–ò –∞–≥–µ–Ω—Ç–∞ - –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥"""
    logger.info("–ó–∞–ø—É—Å–∫ –ò–ò –∞–≥–µ–Ω—Ç–∞...")

    init_db()
    agent = AIAgent()

    # –ü–õ–ê–ù A: –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    event_bus = get_event_bus()
    task_events.subscribe_to_creations(handle_task_creation)

    logger.info("–ò–ò –∞–≥–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á (–≥–∏–±—Ä–∏–¥–Ω—ã–π —Ä–µ–∂–∏–º)")
    logger.info("- –°–æ–±—ã—Ç–∏—è: –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á")
    logger.info("- Polling: –¥–ª—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(event_bus.start_processing(poll_interval=0.5))

    # –ü–õ–ê–ù B: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await check_and_process_pending_tasks(agent)
            await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–∞—á: {e}")
            await asyncio.sleep(5)


async def check_and_process_pending_tasks(agent: AIAgent):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
    try:
        db.connect()

        # –ò—â–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        pending_tasks = Task.select().where(Task.status == "pending")

        if pending_tasks.count() > 0:
            logger.info(
                f"üîç –ù–∞–π–¥–µ–Ω–æ {pending_tasks.count()} –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..."
            )

            for task in pending_tasks:
                try:
                    logger.info(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É {task.id}")

                    # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—É—é
                    task.status = "processing"
                    task.save()

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                    result = await agent.process_task(task)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    task.result = result
                    task.status = "completed"
                    task.save()

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                    task_events.task_completed(task_id=task.id, result=result)

                    logger.info(f"‚úÖ –ü—Ä–æ–ø—É—â–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {task.id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏ {task.id}: {e}")
                    task.status = "failed"
                    task.result = f"–û—à–∏–±–∫–∞: {str(e)}"
                    task.save()

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ò–ò –∞–≥–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ò–ò –∞–≥–µ–Ω—Ç–∞: {e}")
        raise
