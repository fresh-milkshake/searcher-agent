import asyncio
import os
import json
from aiogram import Bot, Dispatcher
from dotenv import load_dotenv
import sys

sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

from shared.database import db, Task, ResearchTopic, PaperAnalysis, ArxivPaper, init_db
from peewee import DoesNotExist
from shared.logger import get_logger
from shared.event_system import get_event_bus, Event, task_events
from bot.handlers import general_router, management_router

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

logger = get_logger(__name__)

bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()
dp.include_router(general_router)
dp.include_router(management_router)


async def handle_task_completion(event: Event):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        task_id = event.data.get("task_id")
        result = event.data.get("result")
        task_type = event.data.get("task_type", "unknown")

        if not task_id:
            logger.warning(f"–°–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –±–µ–∑ ID: {event.data}")
            return

        db.connect()

        try:
            task = Task.get(Task.id == task_id)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            task_data = json.loads(task.data) if task.data else {}
            user_id = task_data.get("user_id")

            if not user_id:
                logger.warning(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç user_id")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á
            if task_type == "analysis_complete":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–µ
                analysis_id = task_data.get("analysis_id")
                if analysis_id:
                    await send_analysis_report(user_id, analysis_id)

            elif task_type == "monitoring_started":
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                await bot.send_message(
                    chat_id=user_id,
                    text="ü§ñ **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!**\n\n–ò–ò-–∞–≥–µ–Ω—Ç –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π.",
                )

            elif task_type in ["start_monitoring", "restart_monitoring"]:
                # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
                await bot.send_message(
                    chat_id=user_id,
                    text=f"‚úÖ {result}" if result else "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω",
                )

            elif result:
                # –û–±—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á
                await bot.send_message(chat_id=user_id, text=result)

            # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
            task.status = "sent"
            task.save()

            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} —Ç–∏–ø–∞ {task_type}")

        except DoesNotExist:
            logger.error(f"–ó–∞–¥–∞—á–∞ {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")


async def send_analysis_report(user_id: int, analysis_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç—å–µ"""
    try:
        db.connect()

        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—å–∏ –∏ —Ç–µ–º—ã
        analysis = (
            PaperAnalysis.select(PaperAnalysis, ArxivPaper, ResearchTopic)
            .join(ArxivPaper)
            .switch(PaperAnalysis)
            .join(ResearchTopic)
            .where(PaperAnalysis.id == analysis_id)
            .get()
        )

        paper = analysis.paper
        topic = analysis.topic

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ idea.md
        report = f"""
üî¨ **–ù–∞–π–¥–µ–Ω–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç–µ–º: "{topic.target_topic}" –≤ –æ–±–ª–∞—Å—Ç–∏ "{topic.search_area}"**

üìÑ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {paper.title}

üë• **–ê–≤—Ç–æ—Ä—ã:** {paper.authors if paper.authors else '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}

üìÖ **–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:** {paper.published.strftime('%d.%m.%Y')}

üìö **–ö–∞—Ç–µ–≥–æ—Ä–∏—è arXiv:** {paper.primary_category or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}

üîó **–°—Å—ã–ª–∫–∞:** {paper.abs_url}

üìä **–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–µ–º:**
‚Ä¢ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –ø–æ–∏—Å–∫–∞: {analysis.search_area_relevance:.1f}%
‚Ä¢ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ç–µ–º—ã: {analysis.target_topic_relevance:.1f}%
‚Ä¢ **–ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {analysis.overall_relevance:.1f}%**

üìã **–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:**
{analysis.summary or '–ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ'}
        """

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if analysis.key_fragments:
            try:
                fragments = json.loads(analysis.key_fragments)
                if fragments:
                    report += "\n\nüîç **–ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã:**\n"
                    for fragment in fragments[:3]:  # –ú–∞–∫—Å–∏–º—É–º 3 —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
                        report += f"‚Ä¢ {fragment}\n"
            except json.JSONDecodeError:
                pass

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
        if analysis.contextual_reasoning:
            report += f"\n\nüí° **–ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:**\n{analysis.contextual_reasoning}"

        await bot.send_message(chat_id=user_id, text=report)

        # –ü–æ–º–µ—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
        analysis.status = "sent"
        analysis.save()

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∞–Ω–∞–ª–∏–∑—É {analysis_id}")
        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ {analysis_id}: {e}")
        db.close()


async def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞...")

    init_db()

    # –ü–æ–ª—É—á–∞–µ–º —à–∏–Ω—É —Å–æ–±—ã—Ç–∏–π –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞—á
    event_bus = get_event_bus()
    task_events.subscribe_to_completions(handle_task_completion)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(event_bus.start_processing(poll_interval=0.5))

    logger.info("–¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
