from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
import re
import json

from shared.database import db, ResearchTopic, UserSettings, Task
from peewee import DoesNotExist
from shared.logger import get_logger
from shared.event_system import task_events

router = Router(name="management")

logger = get_logger(__name__)


@router.message(Command("topic"))
async def command_topic_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /topic –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–º –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        command_text = message.text or ""

        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã (–æ–∂–∏–¥–∞–µ–º –¥–≤–µ —Ç–µ–º—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
        pattern = r'/topic\s+"([^"]+)"\s+"([^"]+)"'
        match = re.search(pattern, command_text)

        if not match:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n\n"
                "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
                '`/topic "—Ü–µ–ª–µ–≤–∞—è —Ç–µ–º–∞" "–æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞"`\n\n'
                "üìù –ü—Ä–∏–º–µ—Ä—ã:\n"
                '‚Ä¢ `/topic "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" "–º–µ–¥–∏—Ü–∏–Ω–∞"`\n'
                '‚Ä¢ `/topic "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è" "–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è"`\n'
                '‚Ä¢ `/topic "–±–ª–æ–∫—á–µ–π–Ω" "–ª–æ–≥–∏—Å—Ç–∏–∫–∞"`'
            )
            return

        target_topic = match.group(1).strip()
        search_area = match.group(2).strip()

        if len(target_topic) < 2 or len(search_area) < 2:
            await message.answer("‚ùå –¢–µ–º—ã –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
            return

        db.connect()

        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ResearchTopic.update(is_active=False).where(
            ResearchTopic.user_id == user_id, ResearchTopic.is_active
        ).execute()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
        topic = ResearchTopic.create(
            user_id=user_id,
            target_topic=target_topic,
            search_area=search_area,
            is_active=True,
        )

        # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            UserSettings.get(UserSettings.user_id == user_id)
        except DoesNotExist:
            UserSettings.create(user_id=user_id)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ò–ò –∞–≥–µ–Ω—Ç–∞ –Ω–∞ –Ω–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        task = Task.create(
            task_type="start_monitoring",
            data=json.dumps(
                {
                    "user_id": user_id,
                    "topic_id": topic.id,
                    "target_topic": target_topic,
                    "search_area": search_area,
                }
            ),
            status="pending",
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–≥–µ–Ω—Ç–∞
        task_events.task_created(
            task_id=task.id,
            task_type="start_monitoring",
            data={"user_id": user_id, "topic_id": topic.id},
        )

        await message.answer(
            f"‚úÖ **–¢–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!**\n\n"
            f"üéØ **–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–∞:** {target_topic}\n"
            f"üîç **–û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞:** {search_area}\n\n"
            f"ü§ñ –ò–ò-–∞–≥–µ–Ω—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ arXiv –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Ç–µ–º.\n"
            f"üì¨ –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—å—è—Ö.\n\n"
            f"üìä –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/status` –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è."
        )

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /topic: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–º.")


@router.message(Command("switch_themes"))
async def command_switch_themes_handler(message: Message) -> None:
    """–ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —Ü–µ–ª–µ–≤—É—é —Ç–µ–º—É –∏ –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        db.connect()

        try:
            topic = ResearchTopic.get(
                ResearchTopic.user_id == user_id, ResearchTopic.is_active
            )

            # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Ç–µ–º—ã
            old_target = topic.target_topic
            old_area = topic.search_area

            topic.target_topic = old_area
            topic.search_area = old_target
            topic.save()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            task = Task.create(
                task_type="restart_monitoring",
                data=json.dumps(
                    {
                        "user_id": user_id,
                        "topic_id": topic.id,
                        "target_topic": topic.target_topic,
                        "search_area": topic.search_area,
                    }
                ),
                status="pending",
            )

            task_events.task_created(
                task_id=task.id,
                task_type="restart_monitoring",
                data={"user_id": user_id, "topic_id": topic.id},
            )

            await message.answer(
                f"üîÑ **–¢–µ–º—ã –ø–æ–º–µ–Ω—è–Ω—ã –º–µ—Å—Ç–∞–º–∏!**\n\n"
                f"üéØ **–ù–æ–≤–∞—è —Ü–µ–ª–µ–≤–∞—è —Ç–µ–º–∞:** {topic.target_topic}\n"
                f"üîç **–ù–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞:** {topic.search_area}\n\n"
                f"ü§ñ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏."
            )

        except DoesNotExist:
            await message.answer(
                "‚ùå **–¢–µ–º—ã –Ω–µ –∑–∞–¥–∞–Ω—ã**\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/topic` –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Ç–µ–º."
            )

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /switch_themes: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º.")


@router.message(Command("pause"))
async def command_pause_handler(message: Message) -> None:
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        db.connect()

        try:
            settings = UserSettings.get(UserSettings.user_id == user_id)
            settings.monitoring_enabled = False
            settings.save()

            await message.answer(
                "‚è∏Ô∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/resume` –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."
            )

        except DoesNotExist:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /pause: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ.")


@router.message(Command("resume"))
async def command_resume_handler(message: Message) -> None:
    """–í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        db.connect()

        try:
            settings = UserSettings.get(UserSettings.user_id == user_id)
            settings.monitoring_enabled = True
            settings.save()

            await message.answer(
                "‚ñ∂Ô∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω**\n\n"
                "–ò–ò-–∞–≥–µ–Ω—Ç –ø—Ä–æ–¥–æ–ª–∂–∏–ª –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π."
            )

        except DoesNotExist:
            await message.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /resume: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.")


@router.message(Command("settings"))
async def command_settings_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        db.connect()

        try:
            settings = UserSettings.get(UserSettings.user_id == user_id)
        except DoesNotExist:
            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            settings = UserSettings.create(user_id=user_id)

        settings_text = f"""
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω–∞–ª–∏–∑–∞**

üìä **–ü–æ—Ä–æ–≥–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:**
‚Ä¢ –û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞: {settings.min_search_area_relevance:.1f}%
‚Ä¢ –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–∞: {settings.min_target_topic_relevance:.1f}%
‚Ä¢ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {settings.min_overall_relevance:.1f}%

üîî **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ: ‚â•{settings.instant_notification_threshold:.1f}%
‚Ä¢ –î–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞: ‚â•{settings.daily_digest_threshold:.1f}%
‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: ‚â•{settings.weekly_digest_threshold:.1f}%

‚è∞ **–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:**
‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø–æ–∏—Å–∫–∞: {settings.days_back_to_search} –¥–Ω–µ–π

ü§ñ **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {"–í–∫–ª—é—á–µ–Ω" if settings.monitoring_enabled else "–í—ã–∫–ª—é—á–µ–Ω"}

üí° –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º.
        """

        await message.answer(settings_text)
        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /settings: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
