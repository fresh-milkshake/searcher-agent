from aiogram import Router

from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from shared.database import (
    db,
    ResearchTopic,
    UserSettings,
    PaperAnalysis,
    ArxivPaper,
)
from peewee import DoesNotExist
from shared.logger import get_logger

router = Router(name="general")

logger = get_logger(__name__)


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    user_name = "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if message.from_user and message.from_user.full_name:
        user_name = message.from_user.full_name

    help_text = f"""
üî¨ –ü—Ä–∏–≤–µ—Ç, {user_name}! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π arXiv.

–Ø —É–º–µ—é –∏—Å–∫–∞—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∞—É—á–Ω—ã–º–∏ –æ–±–ª–∞—Å—Ç—è–º–∏ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.

üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

üéØ `/topic "—Ü–µ–ª–µ–≤–∞—è —Ç–µ–º–∞" "–æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞"` - –∑–∞–¥–∞—Ç—å —Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
üìä `/status` - —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞  
üîÑ `/switch_themes` - –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —Ç–µ–º—ã
‚è∏Ô∏è `/pause` - –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑
‚ñ∂Ô∏è `/resume` - –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
üìö `/history` - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
‚öôÔ∏è `/settings` - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏

**–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**
`/topic "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" "–º–µ–¥–∏—Ü–∏–Ω–∞"`

–≠—Ç–æ –Ω–∞–π–¥–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–¥–∏—Ü–∏–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –º–µ—Ç–æ–¥—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.
    """

    await message.answer(help_text)


@router.message(Command("status"))
async def command_status_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        db.connect()

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ç–µ–º—É
        try:
            topic = ResearchTopic.get(
                ResearchTopic.user_id == user_id, ResearchTopic.is_active
            )

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            try:
                settings = UserSettings.get(UserSettings.user_id == user_id)
                monitoring_status = (
                    "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if settings.monitoring_enabled else "üî¥ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                )
            except DoesNotExist:
                monitoring_status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω"

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
            analyses_count = (
                PaperAnalysis.select()
                .join(ResearchTopic)
                .where(ResearchTopic.user_id == user_id)
                .count()
            )

            # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏
            relevant_count = (
                PaperAnalysis.select()
                .join(ResearchTopic)
                .where(
                    ResearchTopic.user_id == user_id,
                    PaperAnalysis.overall_relevance >= 50.0,  # type: ignore
                )
                .count()
            )

            status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞**

üéØ **–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–∞:** {topic.target_topic}
üîç **–û–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞:** {topic.search_area}
üìÖ **–°–æ–∑–¥–∞–Ω–æ:** {topic.created_at.strftime('%d.%m.%Y %H:%M')}

ü§ñ **–°–æ—Å—Ç–æ—è–Ω–∏–µ:** {monitoring_status}
üìà **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å—Ç–∞—Ç–µ–π:** {analyses_count}
‚≠ê **–ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö:** {relevant_count}

üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/settings` –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            """

            await message.answer(status_text)

        except DoesNotExist:
            await message.answer(
                "‚ùå **–¢–µ–º—ã –Ω–µ –∑–∞–¥–∞–Ω—ã**\n\n"
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/topic "—Ü–µ–ª–µ–≤–∞—è —Ç–µ–º–∞" "–æ–±–ª–∞—Å—Ç—å –ø–æ–∏—Å–∫–∞"` '
                "–¥–ª—è –Ω–∞—á–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."
            )

        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


@router.message(Command("history"))
async def command_history_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–µ–º"""
    try:
        if not message.from_user:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        user_id = message.from_user.id
        db.connect()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
        analyses = (
            PaperAnalysis.select(PaperAnalysis, ArxivPaper, ResearchTopic)
            .join(ArxivPaper)
            .switch(PaperAnalysis)
            .join(ResearchTopic)
            .where(
                ResearchTopic.user_id == user_id,
                PaperAnalysis.overall_relevance >= 50.0,  # type: ignore
            )
            .order_by(PaperAnalysis.created_at.desc())
            .limit(5)
        )

        if not analyses:
            await message.answer(
                "üìö **–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞**\n\n"
                "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ `/settings`."
            )
            return

        history_text = "üìö **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —Ç–µ–º:**\n\n"

        for analysis in analyses:
            paper = analysis.paper
            history_text += f"""
üìÑ **{paper.title[:80]}{"..." if len(paper.title) > 80 else ""}**
üë• {paper.authors.split(',')[0] if paper.authors else '–ê–≤—Ç–æ—Ä—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {analysis.overall_relevance:.1f}%
üìÖ {analysis.created_at.strftime('%d.%m.%Y')}
üîó {paper.abs_url}

"""

        await message.answer(history_text)
        db.close()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /history: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏.")


@router.message()
async def unknown_message_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        if not message.from_user or not message.from_user.id:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        await message.answer(
            "‚ùì **–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞**\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.\n\n"
            "üî¨ –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π arXiv. "
            "–ó–∞–¥–∞–π—Ç–µ —Ç–µ–º—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥–æ–π `/topic`."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
